class trienode{
    public:
    int cnt;
    unordered_map<int,trienode*>children;
    trienode()
    {
        cnt=0;
    }
};
class Solution {
public:
    long long countPrefixSuffixPairs(vector<string>& words) {
        trienode* root=new trienode();
        trienode* curr;
        long ans=0;
        for(int i=0;i<words.size();i++)
        {
          string s=words[i];
          int sz=s.size();
          int ind=0;
          int j=sz-1;
          curr=root; 
          while(ind<sz)
          {
            int num=(s[ind]-'a')*25+(s[j]-'a');
            if(curr->children.find(num)==curr->children.end())
            {
                trienode* child=new trienode();
                curr->children[num]=child;
            }
            curr=curr->children[num];
            ans=ans+curr->cnt;
            ind++;
            j--;
          }
          curr->cnt++;
        }
        return ans;
    }
};
    trienode* root=new trienode();
    trienode* curr;
    long ans=0;
    for(int i=0;i<words.size();i++)
    {
      string s=words[i];
      int sz=s.size();
      int ind=0;
      curr=root; 
      while(ind<sz)
      {
        int num=(s[ind]-'a');
        if(curr->children.find(num)==curr->children.end())
        {
            trienode* child=new trienode();
            curr->children[num]=child;
        }
        curr=curr->children[num];
        ind++;
      }
      curr->cost=min(curr->cost,costs[i]);
    }
    class Solution {
    public:
    class trienode
    {
        public:
        vector<trienode*>children;
        trienode(){
        children.resize(26,NULL);
        }
    };
    trienode* root=new trienode();
    trienode* curr;
    for(int i=0;i<words.size();i++)
    {
        string s=words[i];
        int sz=s.size();
        int ind=0;
        curr=root; 
        while(ind<sz)
        {
            int num=(s[ind]-'a');
            if(curr->children[num]==NULL)
            {
                trienode* child=new trienode();
                curr->children[num]=child;
            }
            curr=curr->children[num];
            ind++;
        }
    }
